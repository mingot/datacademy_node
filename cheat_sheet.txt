# Start R daemon
require('Rserve')
Rserve()

# Stop R daemon
require('Rserve')
c <- RSconnect()
RSshutdown(c)

# Start server directly
Rserve(debug=TRUE,6666)

# Start Rserve as a daemon from the command line
$ R CMD Rserve


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NODE.JS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

var rio = require('rio');

rio.evaluate("pi / 2 * 2");
rio.evaluate('c(1, 2)');
rio.evaluate("as.character('Hello World')");
rio.evaluate('c("a", "b")');
rio.evaluate('Sys.sleep(5); 11')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MORE R (Dylan)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#For debugging, installed RSclient package to connect to Rserve

#To get, run "wget http://www.rforge.net/RSclient/snapshot/RSclient_0.7-2.tar.gz"

#To install, run "sudo aptitude install libssl-dev", then "sudo R CMD INSTALL RSclient_0.7-2.tar.gz"

#Then in R:
require('RSclient')
c <- RSconnect(host='localhost',port=6311)
RSeval(c,'3*4')
RSeval(c,'a -< 2')
RSeval(c,'a')

#### IMPORTANT!! To show error messages:
options()['show.error.messages'] == TRUE

## Some output exemplifying the problem with confusing Rserve errors with actual R errors
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5, silent=TRUE)
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5, silent=TRUE)
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5, silent=TRUE)
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5, silent=TRUE)
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5ss, silent=TRUE)
Error: unexpected symbol in "a<-try(2*5ss"   <---RSERVE ERROR
> capture.output(a)
[1] "[1] 10"
> a<-try(2*5ss, silent=TRUE)
Error: unexpected symbol in "a<-try(2*5ss"
> capture.output(a)
[1] "[1] 10"
> a<-try(eval(2*5ss), silent=TRUE)
Error: unexpected symbol in "a<-try(eval(2*5ss"
> capture.output(a)
[1] "[1] 10"

> a<-try(eval(sss), silent=TRUE)
> capture.output(a)
[1] "[1] \"Error in eval(sss) : object 'sss' not found\\n\""
[2] "attr(,\"class\")"
[3] "[1] \"try-error\""
[4] "attr(,\"condition\")"
[5] "<simpleError in eval(sss): object 'sss' not found>"

